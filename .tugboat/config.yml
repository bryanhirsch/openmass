services:
  # What to call the service hosting the site.
  php:
    # Use PHP 7.x with Apache; this syntax pulls in the latest version of PHP 7
    image: tugboatqa/php:7.4-apache

    # Set this as the default service. This does a few things
    #   1. Clones the git repository into the service container
    #   2. Exposes port 80 to the Tugboat HTTP proxy
    #   3. Routes requests to the preview URL to this service
    default: true

    # Wait until the mysql service is done building
    depends: mysql

    # A set of commands to run while building this service
    commands:
      # Commands that set up the basic preview infrastructure
      init:
        # Install opcache and mod-rewrite.
        #- docker-php-ext-install opcache
        #- a2enmod headers rewrite
        #- sudo service apache2 restart

        # Link the document root to the expected path. This example links /web
        # to the docroot.
        - ln -snf "${TUGBOAT_ROOT}/docroot" "${DOCROOT}"

        # Create the Drupal private and public files directories if they aren't
        # already present.
        - mkdir -p "${TUGBOAT_ROOT}/files-private" "${DOCROOT}/sites/default/files"

      # Commands that import files, databases, or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Install/update packages that may have changed since the build stage.
        - composer install --optimize-autoloader
        - curl -f -o ${TUGBOAT_ROOT}/drush/sites/self.site.yml -L https://$GITHUB_MASSGOV_BOT_TOKEN@raw.githubusercontent.com/massgov/massgov-internal-docs/master/self.site.yml
        - PATH=vendor/bin:$PATH scripts/ma-refresh-local --db-prep-only
        - #        - vendor/bin/drush ma:latest-backup-url -vvv prod
#        - wget -q --continue $(vendor/bin/drush ma:latest-backup-url prod) --output-document=/tmp/database.sql.gz

        # Set file permissions such that Drupal will not complain.
        - chgrp -R www-data "${DOCROOT}/sites/default/files"
        - find "${DOCROOT}/sites/default/files" -type d -exec chmod 2775 {} \;
        - find "${DOCROOT}/sites/default/files" -type f -exec chmod 0664 {} \;

      # Commands that build the site. This is where you would add things
      # like feature reverts or any other drush commands required to
      # set up or configure the site. When a preview is built from a
      # base preview, the build workflow starts here, skipping the init
      # and update steps, because the results of those are inherited
      # from the base preview.
      build:
        - composer install --no-interaction --optimize-autoloader
        - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
        # https://linuxize.com/post/how-to-install-yarn-on-ubuntu-20-04/
        - echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
        - sudo apt update
        - sudo apt install yarn
        - yarn install

  # This 'mysql' key acts as the hostname to access the service by from the php service.
  mysql:
    # Use the latest available 5.x version of MySQL
    image: tugboatqa/mariadb:10.5

    # A set of commands to run while building this service
#    commands:
#      # Commands that import files, databases, or other assets. When an
#      # existing preview is refreshed, the build workflow starts here,
#      # skipping the init step, because the results of that step will
#      # already be present.
#      update:
#        # Copy a database dump from an external server. The public
#        # SSH key found in the Tugboat Repository configuration must be
#        # copied to the external server in order to use scp.
#        - zcat /tmp/database.sql.gz | mysql tugboat
#        - rm /tmp/database.sql.gz
